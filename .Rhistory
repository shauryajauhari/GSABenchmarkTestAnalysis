biocLite("SWAN")
install.packages("SWAN")
biocLite("SWAN")
SetSw = SWAN(mSet, verbose = TRUE)
mSetSw = SWAN(mSet, verbose = TRUE)
library(minfiData)
mSetSw = SWAN(mSet, verbose = TRUE)
library(missMethyl)
library(limma)
library(minfi)
library(minfiData)
biocLite("methylumi")
library(methylumi)
mSetSw = SWAN(mSet, verbose = TRUE)
library(missMethyl)
biocLite("missMethyl")
library(missMethyl)
library(limma)
library(minfi)
library(minfiData)
biocLite(missMethyl)
biocLite("missMethyl")
library(IlluminaHumanMethylationEPICanno.ilm10b2.hg19)
mSetSw <- SWAN(mSet,verbose=TRUE)
library(missMethyl)
library(limma)
library(minfi)
library(minfiData)
baseDir=system.file("extdata", package = "minfiData")
targets= read.metharray.sheet(baseDir)
targets[, 10:12]
mSet= preprocessRaw(rgSet)
rgSet= read.metharray.exp(targets = targets)
mSetSw = SWAN(mSet, verbose = TRUE)
par(mfrow=c(1,2), cex=1.25)
densityByProbeType(mSet[,1], main = "Raw")
densityByProbeType(mSetSw[,1], main = "SWAN")
detP <- detectionP(rgSet)
keep <- rowSums(detP < 0.01) == ncol(rgSet)
mSetSw <- mSetSw[keep,]
mset_reduced <- mSetSw[sample(1:nrow(mSetSw), 20000),]
meth <- getMeth(mset_reduced)
unmeth <- getUnmeth(mset_reduced)
Mval <- log2((meth + 100)/(unmeth + 100))
beta <- getBeta(mset_reduced)
dim(Mval)
par(mfrow=c(1,1))
plotMDS(Mval, labels=targets$Sample_Name, col=as.integer(factor(targets$status)))
legend("topleft",legend=c("Cancer","Normal"),pch=16,cex=1.2,col=1:2)
group <- factor(targets$status,levels=c("normal","cancer"))
id <- factor(targets$person)
design <- model.matrix(~id + group)
design
fit.reduced <- lmFit(Mval,design)
fit.reduced <- eBayes(fit.reduced)
summary(decideTests(fit.reduced))
top<-topTable(fit.reduced,coef=4)
top
cpgs <- rownames(top)
par(mfrow=c(2,2))
for(i in 1:4){
stripchart(beta[rownames(beta)==cpgs[i],]~design[,4],method="jitter",
group.names=c("Normal","Cancer"),pch=16,cex=1.5,col=c(4,2),ylab="Beta values",
vertical=TRUE,cex.axis=1.5,cex.lab=1.5)
cpgs <- rownames(top)
par(mfrow=c(2,2))
for(i in 1:4){
stripchart(beta[rownames(beta)==cpgs[i],]~design[,4],method="jitter",
group.names=c("Normal","Cancer"),pch=16,cex=1.5,col=c(4,2),ylab="Beta values",
vertical=TRUE,cex.axis=1.5,cex.lab=1.5)
title(cpgs[i],cex.main=1.5)
}
cpgs <- rownames(top)
par(mfrow=c(2,2))
for(i in 1:4){
stripchart(beta[rownames(beta)==cpgs[i],]~design[,4],method="jitter",
group.names=c("Normal","Cancer"),pch=16,cex=1.5,col=c(4,2),ylab="Beta values",
vertical=TRUE,cex.axis=1.5,cex.lab=1.5)
title(cpgs[i],cex.main=1.5)
}
meth <- getMeth(mSet)
unmeth <- getUnmeth(mSet)
M <- log2((meth + 100)/(unmeth + 100))
grp <- factor(targets$status,levels=c("normal","cancer"))
des <- model.matrix(~grp)
des
INCs <- getINCs(rgSet)
head(INCs)
library(missMethyl)
library(limma)
library(minfi)
aseDir <- system.file("extdata", package = "minfiData")
targets <- read.metharray.sheet(baseDir)
targets[,1:9]
}
meth <- getMeth(mSet)
unmeth <- getUnmeth(mSet)
M <- log2((meth + 100)/(unmeth + 100))
grp <- factor(targets$status,levels=c("normal","cancer"))
des <- model.matrix(~grp)
des
INCs <- getINCs(rgSet)
head(INCs)
Mc <- rbind(M,INCs)
ctl <- rownames(Mc) %in% rownames(INCs)
table(ctl)
rfit1 <- RUVfit(data=Mc, design=des, coef=2, ctl=ctl) # Stage 1 analysis
rfit2 <- RUVadj(rfit1)
top1 <- topRUV(rfit2, num=Inf)
head(top1)
ctl <- rownames(M) %in% rownames(top1[top1$p.ebayes.BH > 0.5,])
table(ctl)
rfit1 <- RUVfit(data=M, design=des, coef=2, ctl=ctl) # Stage 2 analysis
rfit2 <- RUVadj(rfit1)
topRUV(rfit2)
fitvar <- varFit(Mval, design = design, coef = c(1,4))
summary(decideTests(fitvar))
topDV <- topVar(fitvar, coef=4)
topDV
design2 <- model.matrix(~0+group+id)
fitvar.contr <- varFit(Mval, design=design2, coef=c(1,2))
contr <- makeContrasts(groupcancer-groupnormal,levels=colnames(design2))
fitvar.contr <- contrasts.varFit(fitvar.contr,contrasts=contr)
summary(decideTests(fitvar.contr))
topVar(fitvar.contr,coef=1)
cpgsDV <- rownames(topDV)
par(mfrow=c(2,2))
for(i in 1:4){
stripchart(beta[rownames(beta)==cpgsDV[i],]~design[,4],method="jitter",
group.names=c("Normal","Cancer"),pch=16,cex=1.5,col=c(4,2),ylab="Beta values",
vertical=TRUE,cex.axis=1.5,cex.lab=1.5)
title(cpgsDV[i],cex.main=1.5)
}
library(tweeDEseqCountData)
library("tweeDEseqCountData")
install.packages("tweeDEseqCountData")
biocLite("tweeDEseqCountData")
library(tweeDEseqCountData)
data(pickrell1)
counts<-exprs(pickrell1.eset)
dim(counts)
gender <- pickrell1.eset$gender
table(gender)
rm(pickrell1.eset)
data(genderGenes)
data(annotEnsembl63)
annot <- annotEnsembl63[,c("Symbol","Chr")]
rm(annotEnsembl63)
library(edgeR)
biocLite("edgeR")
library(edgeR)
y <- DGEList(counts=counts, genes=annot[rownames(counts),])
isexpr <- rowSums(cpm(y)>1) >= 20
hasannot <- rowSums(is.na(y$genes))==0
y <- y[isexpr & hasannot,,keep.lib.sizes=FALSE]
dim(y)
y <- calcNormFactors(y)
design.hapmap <- model.matrix(~gender)
fitvar.hapmap <- varFit(y, design = design.hapmap)
fitvar.hapmap$genes <- y$genes
summary(decideTests(fitvar.hapmap))
topDV.hapmap <- topVar(fitvar.hapmap,coef=ncol(design.hapmap))
topDV.hapmap
genesDV <- rownames(topDV.hapmap)
par(mfrow=c(2,2))
for(i in 1:4){
stripchart(cpm(y,log=TRUE)[rownames(y)==genesDV[i],]~design.hapmap[,ncol(design.hapmap)],method="jitter",
group.names=c("Female","Male"),pch=16,cex=1.5,col=c(4,2),ylab="Log counts per million",
vertical=TRUE,cex.axis=1.5,cex.lab=1.5)
title(genesDV[i],cex.main=1.5)
}
topRUV(rfit2)
table(rfit2$p.ebayes.BH < 0.01)
beta <- getBeta(mSet)
beta_norm <- rowMeans(beta[,des[,2]==0])
beta_can <- rowMeans(beta[,des[,2]==1])
Delta_beta <- beta_can - beta_norm
sigDM <- rfit2$p.ebayes.BH < 0.01 & abs(Delta_beta) > 0.25
table(sigDM)
topCpGs<-topRUV(rfit2,number=10000)
sigCpGs <- rownames(topCpGs)
sigCpGs[1:10]
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
gst <- gometh(sig.cpg=sigCpGs, all.cpg=rownames(rfit2), collection="GO")
topGO(gst)
topGO(gst)
library(org.Hs.eg.db)
genes <- toTable(org.Hs.egSYMBOL2EG)
set1 <- sample(genes$gene_id,size=80)
set2 <- sample(genes$gene_id,size=100)
set3 <- sample(genes$gene_id,size=30)
genesets <- list(set1,set2,set3)
gsa <- gsameth(sig.cpg=sigCpGs, all.cpg=rownames(rfit2), collection=genesets)
topGSA(gsa)
View(fitvar.hapmap)
library(missMethyl)
library(limma)
library(minfi)
library(minfiData)baseDir <- system.file("extdata", package = "minfiData")
targets <- read.metharray.sheet(baseDir)
library(missMethyl)
library(limma)
library(minfi)
library(minfiData)
baseDir <- system.file("extdata", package = "minfiData")
targets <- read.metharray.sheet(baseDir)
install.packages("ggplot2")
library(ggplot2)
install.packages("RCurl")
library(RCurl)
data(iris)
load(D, file="myData.RData")
?iris
load(file="myData.RData")
load(file="myData.RData")
load(file="myData.RData")
load(file="mydata.RData")
read.csv("/Users/mei/Desktop/Labwork/R_Practice", "/t", header= True)
read.csv("C:/Users/mei/Desktop/Labwork/R_Practice", "/t", header= True)
read.csv("\\Users\\mei\\Desktop\\Labwork\\R_Practice", "/t", header= True)
read.csv("\Users\mei\Desktop\Labwork\R_Practice", "/t", header= True)
read.csv("\Users\mei\Desktop\Labwork\R_Practice.xlsx", "/t", header= True)
read.csv("\Users\mei\Desktop\Labwork\R_Practice.xlsx", sep= "/t", header= True)
read.csv("iCloud Drive\ Desktop\ ⁨Labwork⁩R_Practice", "/t", header= True)
read.csv("\\Users\\mei\\Desktop\\Labwork\\R_Practice.xlsx", sep= "/t", header= True)
read.csv("/Users/mei/Desktop/Labwork/R_Practice.xlsx", sep= "/t", header= True)
read.csv("/Users/mei/Desktop/Labwork/R_Practice.xlsx", sep= '\t', header= TRUE)
mydata= read.csv("/Users/mei/Desktop/Labwork/R_Practice.xlsx", sep= '\t', header= TRUE)
mydata= read.csv("mydata.csv")
mydata= read.csv("/Users/mei/Desktop/Labwork/R_Practice.xlsx", sep= '\t', header= TRUE)
install.packages("xlsx", dependencies = TRUE)
install.packages(gdata)
install.packages(g.data)
library(gdata)
install.packages("xlsx", dependencies = TRUE)
library(gdata)
library(g.data)
library (gdata)
mydata= read.xls("mydata.xls")
mydata= read.xlsx("mydata.xlsx")
write.table(x, file= "mydata", append= FALSE, quote= TRUE, sep= "")
class(mydata)
class(iris)
dim(iris)
head(iris)
mydata= read.csv("/Users/mei/Desktop/Labwork/R_Practice.xlsx", sep= '\t', header= TRUE)
head(iris)
mydata= read.csv("/Users/mei/Desktop/Labwork/R_Practice.xlsx", sep= ',', header= TRUE)
head(mydata)
mydata= read.csv("/Users/mei/Desktop/Labwork/R_Practice.xlsx", sep= ",", header= TRUE)
head(mydata)
dim(mydata)
mydata= read.csv("/Users/mei/Desktop/Labwork/R_Practice.xlsx", sep= "", header= TRUE)
mydata= read.csv("/Users/mei/Desktop/Labwork/R_Practice.xlsx", sep= "", header= TRUE)
mydata= read.csv("/Users/mei/Desktop/Labwork/R_Practice.xlsx", header= TRUE)
mydata= read.csv("/Users/mei/Desktop/Labwork/R_Practice.xlsx", header= FALSE
)
mydata= read.csv("/Users/mei/Desktop/Labwork/R_Practice.xlsx", sep = '\t',  header= FALSE)
mydata= read.csv("/Users/mei/Desktop/Labwork/R_Practice.xlsx", sep = '\t',  header= TRUE, skipNul = TRUE)
mydata= read.csv("/Users/mei/Desktop/Labwork/R_Practice.xlsx", sep = '\t',  header= TRUE, skipNul = FALSE)
mydata= read.csv("/Users/mei/Desktop/Labwork/R_Practice.xlsx", sep = '\t',  header= TRUE, skipNul = TRUE)
mydata= read.csv("/Users/mei/Desktop/Labwork/R_Practice.xlsx", sep = '\t',  header= TRUE, skipNul = TRUE, fileEncoding = "utf8")
mydata= read.csv("/Users/mei/Desktop/Labwork/R_Practice.xlsx", sep = '\t',  header= TRUE, skipNul = TRUE, fileEncoding = "utf16")
mydata= read.csv("/Users/mei/Desktop/Labwork/R_Practice.xlsx", sep = '\t',  header= TRUE, skipNul = TRUE, fileEncoding = "utf8")
mydata= read.csv("/Users/mei/Desktop/Labwork/R_Practice.xlsx", sep = '\t',  header= FALSE, skipNul = TRUE, fileEncoding = "utf8")
source('http://www.bioconductor.org/biocLite.R')
biocLite(AnnotationHub)
biocLite('AnnotationHub')
install.packages("AnnotationHub")
source("http://www.bioconductor.org/biocLite.R")
biocLite(AnnotationHub)
biocLite('AnnotationHub')
library(AnnotationHub)
temp <- AnnotationHub()
temp
exit
q()
memory.size()
memory.limit()
? memory.size()
memory.size(max=TRUE)
? memory.size()
q()
install.packages('IRkernel')
q()
q()
q()
library(GenomicRanges)
gr1 <- GRanges(seqnames=Rle(c("ch1", "chMT"), c(2, 4)),
+                ranges=IRanges(16:21, 20),
+                strand=rep(c("+", "-", "*"), 2))
gr1 <- GRanges(seqnames=Rle(c("ch1", "chMT"), c(2, 4)),
+                strand=rep(c("+", "-", "*"), 2))
gr1 <- GRanges(seqnames=Rle(c("ch1", "chMT"), c(2, 4)), ranges=IRanges(16:21,20))
gr2 <- GRanges(seqnames=Rle(c("ch2", "ch3"), c(2, 4)), ranges=IRanges(23:29,20))
gr2 <- GRanges(seqnames=Rle(c("ch2", "ch3"), c(2, 4)), ranges=IRanges(23:30,20))
gr2 <- GRanges(seqnames=Rle(c("ch2", "ch3"), c(2, 4)), ranges=IRanges(17:20,20))
gr2 <- GRanges(seqnames=Rle(c("ch2", "ch3"), c(2, 4)), ranges=IRanges(16:23,20))
gr2 <- GRanges(seqnames=Rle(c("ch2", "ch3"), c(2, 4)), ranges=IRanges(16:21,20))
gr= GRangesList(gr1,gr2)
library(rtracklayer)
library(usethis)
for(i in 1:length(gr)){
gr3 <- GRanges(seqnames=Rle(c("ch5", "ch5"), c(2, 4)), ranges=IRanges(16:21,20))
gr= GRangesList(gr1,gr2,gr3)
gr
names(gr)= c("gr1","gr2","gr3")
for(i in 1:length(gr)){
export.bed(gr[i],format="bed", con= paste(eval(parse(text='names(gr[i])')),"data.bed",sep=""))}
q()
library(seq2pathway)
install.packages('IRkernel')
install.packages('IRkernel')
library(IRkernel)
IRkernel::installspec()
q()
Plotting_Comparison_Metrics <- function(){
Pr <- as.character(readline("Enter the path of the prioritization file:"))
SSn <- as.character(readline("Enter the path of the surrogate sensitivity file:"))
Sn <- as.character(readline("Enter the path of the sensitivity file:"))
Sp <- as.character(readline("Enter the path of the specificity file:"))
Pn <- as.character(readline("Enter the path of the precision file:"))
prioritization_score_table <- read.table(Pr, sep = "\t", header = TRUE, quote = "")
#jpeg(file="Prioritization.jpeg")
prioritization_score_table <- prioritization_score_table[,c(5,10,15,20)]
boxplot(prioritization_score_table, ylab = "Prioritization", xlab = "Enrichment Method",col = c("salmon","tan","khaki","lavender"), boxwex = 0.1, ylim = c(0,100), names = c("Chipenrich", "Broadenrich","Seq2pathway", "Enrichr"))
abline(prioritization_score_table , h=50, col="red")
#dev.off()
## (Surrogate) Sensitivity Plot | Import the score table from file.
surrogate_sensitivity_table <- read.table(SSn, sep = "\t", header = TRUE, quote = "")
#jpeg(file="Surrogate_Sensitivity.jpeg")
surrogate_sensitivity_table <- surrogate_sensitivity_table[,c(5,10,15,20)]
boxplot(surrogate_sensitivity_table, ylab = "Sensitivity (P-values of Target Pathways)", xlab = "Enrichment Method",col = c("salmon","tan","khaki","lavender"), boxwex = 0.1, ylim = c(0,1), names = c("Chipenrich", "Broadenrich","Seq2pathway","Enrichr"))
abline(surrogate_sensitivity_table, h=0.5, col="red")
#dev.off()
## Sensitivity Plot | Import the score table from file.
sensitivity_table <- read.table(Sn, sep = "\t", header = TRUE, quote = "")
#jpeg(file="Sensitivity.jpeg")
sensitivity_table <- sensitivity_table[,c(5,10,15,20)]
boxplot(sensitivity_table, ylab = "Sensitivity", xlab = "Enrichment Method",col = c("salmon","tan","khaki","lavender"), boxwex = 0.1, ylim = c(0,100), names = c("Chipenrich","Broadenrich","Seq2pathway","Enrichr"))
abline(sensitivity_table, h=50, col="red")
#dev.off()
## Specificity Plot | Import the score table from file.
specificity_table <- read.table(Sp, sep = "\t", header = TRUE, quote = "")
#jpeg(file="Specificity.jpeg")
specificity_table <- specificity_table[,c(5,10,15,20)]
boxplot(specificity_table, ylab = "Specificity", xlab = "Enrichment Method",col = c("salmon","tan","khaki","lavender"), boxwex = 0.1, ylim = c(0,100), names = c("Chipenrich","Broadenrich","Seq2pathway","Enrichr"))
abline(specificity_table, h=50, col="red")
#dev.off()
## Precision Plot | Import the score table from file.
precision_table <- read.table(Pn, sep = "\t", header = TRUE, quote = "")
#jpeg(file="Precision.jpeg")
precision_table <- precision_table[,c(5,10,15,20)]
boxplot(precision_table, ylab = "Precision", xlab = "Enrichment Method",col = c("salmon","tan","khaki","lavender"), boxwex = 0.1, ylim = c(0,3), names = c("Chipenrich","Broadenrich","Seq2pathway","Enrichr"))
abline(precision_table, h=0.5, col="red")
#dev.off()
}
Plotting_Comparison_Metrics()
install.packages("caTools")
require(devtools)
devtools::install_github('hms-dbmi/spp', build_vignettes = FALSE)
require(devtools);
devtools::install_github('hms-dbmi/spp', build_vignettes = FALSE)
install.pacakges("spp", dependencies=TRUE)
install.packages("spp")
library(spp)
install.packages("R.matlab")
install.packages)"gmb")
install.packages("gmb")
install.packages("gbm")
install.packages("gbm")
install.packages("gbm")
install.packages("gmb")
system("bamCoverage --bam ENCFF663SAM.bam \
-o ENCFF663SAM2000_30.bw \
--binSize 2000 \ # enhancer size
--normalizeUsing RPKM \
--effectiveGenomeSize 2913022398 \ # GrCh38 genome length
--outFileFormat bedgraph \
--maxFragmentLength 30)")
system("bamCoverage --bam ENCFF663SAM.bam
-o ENCFF663SAM2000_30.bw
--binSize 2000
--normalizeUsing RPKM
--effectiveGenomeSize 2913022398
--outFileFormat bedgraph
--maxFragmentLength 30)")
system("bamCoverage --bam ENCFF663SAM.bam -o ENCFF663SAM2000_30.bw --binSize 2000 --normalizeUsing RPKM --effectiveGenomeSize 2913022398 --outFileFormat bedgraph --maxFragmentLength 30)")
system("bamCoverage --bam ENCFF663SAM.bam -o ENCFF663SAM2000_30.bw --binSize 2000 --normalizeUsing RPKM --effectiveGenomeSize 2913022398 --outFileFormat bedgraph --maxFragmentLength 30")
ChIPSeqDataMaster <- read.csv(file = "GSAChIPSeqBenchmarkDatasetProfile.txt", sep = '\t', header = TRUE, quote = "")
ChIPSeqDataMaster <- read.table(file = "GSAChIPSeqBenchmarkDatasetProfile.txt", sep = '\t', header = TRUE, quote = "")
ChIPSeqDataMaster <- read.txt(file = "GSAChIPSeqBenchmarkDatasetProfile.txt", sep = '\t', header = TRUE, quote = "")
setwd(".")
proj_set()
ChIPSeqDataMaster <- read.csv (file = "GSAChIPSeqBenchmarkDatasetProfile.txt", sep = '\t', header = TRUE, quote = "")
#
getwd()
setwd("/Users/mei/Desktop/GSABenchmarkTestAnalysis/")
proj_set()
library(devtools)
proj_set()
ChIPSeqDataMaster <- read.csv (file = "GSAChIPSeqBenchmarkDatasetProfile.txt", sep = '\t', header = TRUE, quote = "")
ChIPSeqSamples<-as.character(ChIPSeqDataMaster$GSM)
samplesInBED = list()
for(i in 1:length(ChIPSeqSamples))
{
samplesInBED[[i]] <- read.table(paste0("./testData/",paste0(eval(parse(text="ChIPSeqSamples[i]")),".bed")), sep = "\t", header = FALSE)
samplesInBED[[i]] <- samplesInBED[[i]][,1:3]
colnames(samplesInBED[[i]]) <- c("chrom", "start", "end")
samplesInBED[[i]] <- samplesInBED[[i]][order(samplesInBED[[i]]$chrom),]
samplesInBED[[i]] <- samplesInBED(samplesInBED[[i]]$chrom, IRanges(samplesInBED[[i]]$`start`, samplesInBED[[i]]$`end`))
genome(samplesInBED[[i]]) <- "hg38"
}
for(i in 1:length(ChIPSeqSamples))
{
samplesInBED[[i]] <- read.table(paste0("./testData/",paste0(eval(parse(text="ChIPSeqSamples[i]")),".bed")), sep = "\t", header = FALSE)
samplesInBED[[i]] <- samplesInBED[[i]][,1:3]
colnames(samplesInBED[[i]]) <- c("chrom", "start", "end")
samplesInBED[[i]] <- samplesInBED[[i]][order(samplesInBED[[i]]$chrom),]
samplesInBED[[i]] <- GRanges(samplesInBED[[i]]$chrom, IRanges(samplesInBED[[i]]$`start`, samplesInBED[[i]]$`end`))
genome(samplesInBED[[i]]) <- "hg38"
}
library(GenomicRanges)
for(i in 1:length(ChIPSeqSamples))
{
samplesInBED[[i]] <- read.table(paste0("./testData/",paste0(eval(parse(text="ChIPSeqSamples[i]")),".bed")), sep = "\t", header = FALSE)
samplesInBED[[i]] <- samplesInBED[[i]][,1:3]
colnames(samplesInBED[[i]]) <- c("chrom", "start", "end")
samplesInBED[[i]] <- samplesInBED[[i]][order(samplesInBED[[i]]$chrom),]
samplesInBED[[i]] <- GRanges(samplesInBED[[i]]$chrom, IRanges(samplesInBED[[i]]$`start`, samplesInBED[[i]]$`end`))
genome(samplesInBED[[i]]) <- "hg38"
}
samplesInBED <- GRangesList(samplesInBED)
names(samplesInBED) <- ChIPSeqSamples
setwd("~/Desktop/GSABenchmarkTestAnalysis")
setwd(".")
dataImportClean <- function(){
### Importing the master table ###
setwd(".")
proj_set()
ChIPSeqDataMaster <- read.csv (file = "GSAChIPSeqBenchmarkDatasetProfile.txt", sep = '\t', header = TRUE, quote = "")
## The following code creates a list of samples for which we need to extract the BED files for.
ChIPSeqSamples<-as.character(ChIPSeqDataMaster$GSM)
## Initializing list for storing BED files and the consecutive GRanges objects.
samplesInBED = list()
for(i in 1:length(ChIPSeqSamples))
{
samplesInBED[[i]] <- read.table(paste0("./testData/",paste0(eval(parse(text="ChIPSeqSamples[i]")),".bed")), sep = "\t", header = FALSE)
samplesInBED[[i]] <- samplesInBED[[i]][,1:3]
colnames(samplesInBED[[i]]) <- c("chrom", "start", "end")
samplesInBED[[i]] <- samplesInBED[[i]][order(samplesInBED[[i]]$chrom),]
samplesInBED[[i]] <- GRanges(samplesInBED[[i]]$chrom, IRanges(samplesInBED[[i]]$`start`, samplesInBED[[i]]$`end`))
genome(samplesInBED[[i]]) <- "hg38"
}
## Saving BED files as GRanges objects ##
samplesInBED <- GRangesList(samplesInBED)
names(samplesInBED) <- ChIPSeqSamples
}
samplesInBED
dataImportClean()
samplesInBED
View(ChIPSeqDataMaster)
ChIPSeqSamples
dataImportClean <- function(){
### Importing the master table ###
setwd(".")
proj_set()
ChIPSeqDataMaster <- read.csv (file = "GSAChIPSeqBenchmarkDatasetProfile.txt", sep = '\t', header = TRUE, quote = "")
## The following code creates a list of samples for which we need to extract the BED files for.
ChIPSeqSamples<-as.character(ChIPSeqDataMaster$GSM)
## Initializing list for storing BED files and the consecutive GRanges objects.
samplesInBED = list()
for(i in 1:length(ChIPSeqSamples))
{
samplesInBED[[i]] <- read.table(paste0("./testData/",paste0(eval(parse(text="ChIPSeqSamples[i]")),".bed")), sep = "\t", header = FALSE)
samplesInBED[[i]] <- samplesInBED[[i]][,1:3]
colnames(samplesInBED[[i]]) <- c("chrom", "start", "end")
samplesInBED[[i]] <- samplesInBED[[i]][order(samplesInBED[[i]]$chrom),]
samplesInBED[[i]] <- GRanges(samplesInBED[[i]]$chrom, IRanges(samplesInBED[[i]]$`start`, samplesInBED[[i]]$`end`))
genome(samplesInBED[[i]]) <- "hg38"
}
## Saving BED files as GRanges objects ##
samplesInBED <- GRangesList(samplesInBED)
names(samplesInBED) <- ChIPSeqSamples
}
dataImportClean()
samplesInBED
dataImportClean <- function(){
### Importing the master table ###
setwd(".")
proj_set()
ChIPSeqDataMaster <- read.csv (file = "GSAChIPSeqBenchmarkDatasetProfile.txt", sep = '\t', header = TRUE, quote = "")
## The following code creates a list of samples for which we need to extract the BED files for.
ChIPSeqSamples<-as.character(ChIPSeqDataMaster$GSM)
## Initializing list for storing BED files and the consecutive GRanges objects.
samplesInBED = list()
for(i in 1:length(ChIPSeqSamples))
{
samplesInBED[[i]] <- read.table(paste0("./testData/",paste0(eval(parse(text="ChIPSeqSamples[i]")),".bed")), sep = "\t", header = FALSE)
samplesInBED[[i]] <- samplesInBED[[i]][,1:3]
colnames(samplesInBED[[i]]) <- c("chrom", "start", "end")
samplesInBED[[i]] <- samplesInBED[[i]][order(samplesInBED[[i]]$chrom),]
samplesInBED[[i]] <- GRanges(seqnames = samplesInBED[[i]]$chrom, ranges = IRanges(samplesInBED[[i]]$`start`, samplesInBED[[i]]$`end`))
genome(samplesInBED[[i]]) <- "hg38"
}
## Saving BED files as GRanges objects ##
samplesInBED <- GRangesList(samplesInBED)
names(samplesInBED) <- ChIPSeqSamples
}
dataImportClean()
samplesInBED
saveRDS(samplesInBED, "samplesInBED.rds")
